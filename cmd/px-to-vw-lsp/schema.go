// Code generated by github.com/atombender/go-jsonschema
// Schema definition for cssrem configuration files

package main

import "encoding/json"
import "fmt"
import "reflect"

type SchemaJson struct {
	// Whether to enabled mark, default: false
	AddMark bool `json:"addMark,omitempty" yaml:"addMark,omitempty" mapstructure:"addMark,omitempty"`

	// Automatically remove prefix 0
	AutoRemovePrefixZero bool `json:"autoRemovePrefixZero,omitempty" yaml:"autoRemovePrefixZero,omitempty" mapstructure:"autoRemovePrefixZero,omitempty"`

	// Whether to display mark in after line, `disabled`: Disabled, `show` Show
	CurrentLine SchemaJsonCurrentLine `json:"currentLine,omitempty" yaml:"currentLine,omitempty" mapstructure:"currentLine,omitempty"`

	// Px to rem decimal point maximum length
	FixedDigits float64 `json:"fixedDigits,omitempty" yaml:"fixedDigits,omitempty" mapstructure:"fixedDigits,omitempty"`

	// Whether to enable display conversion data on hover, Default: onlyMark
	Hover SchemaJsonHover `json:"hover,omitempty" yaml:"hover,omitempty" mapstructure:"hover,omitempty"`

	// 忽略清单，支持 glob 表达式
	Ignores []string `json:"ignores,omitempty" yaml:"ignores,omitempty" mapstructure:"ignores,omitempty"`

	// Ignores `px` to `rem` when trigger command, can be set `[ "1px", "0.5px" ]`
	IgnoresViaCommand []string `json:"ignoresViaCommand,omitempty" yaml:"ignoresViaCommand,omitempty" mapstructure:"ignoresViaCommand,omitempty"`

	// 支持语言清单
	Languages []string `json:"languages,omitempty" yaml:"languages,omitempty" mapstructure:"languages,omitempty"`

	// Whether to enable rem hover
	RemHover bool `json:"remHover,omitempty" yaml:"remHover,omitempty" mapstructure:"remHover,omitempty"`

	// Root font-size (unit: px)
	RootFontSize float64 `json:"rootFontSize,omitempty" yaml:"rootFontSize,omitempty" mapstructure:"rootFontSize,omitempty"`

	// Whether to enable VW switch px support
	Vw bool `json:"vw,omitempty" yaml:"vw,omitempty" mapstructure:"vw,omitempty"`

	// Specifies the width of the design (equar to the browser viewport width),
	// default: `750`
	VwDesign float64 `json:"vwDesign,omitempty" yaml:"vwDesign,omitempty" mapstructure:"vwDesign,omitempty"`

	// Whether to enable vw hover
	VwHover bool `json:"vwHover,omitempty" yaml:"vwHover,omitempty" mapstructure:"vwHover,omitempty"`

	// Whether to enable WXSS support
	Wxss bool `json:"wxss,omitempty" yaml:"wxss,omitempty" mapstructure:"wxss,omitempty"`

	// 设备分辨率宽度，官方推荐使用 iPhone6 作为视觉稿的标准，默认：`375`
	WxssDeviceWidth float64 `json:"wxssDeviceWidth,omitempty" yaml:"wxssDeviceWidth,omitempty" mapstructure:"wxssDeviceWidth,omitempty"`

	// 规定屏幕宽度，默认
	// `750`，[尺寸单位](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html)
	WxssScreenWidth float64 `json:"wxssScreenWidth,omitempty" yaml:"wxssScreenWidth,omitempty" mapstructure:"wxssScreenWidth,omitempty"`
}

type SchemaJsonCurrentLine string

const SchemaJsonCurrentLineDisabled SchemaJsonCurrentLine = "disabled"
const SchemaJsonCurrentLineShow SchemaJsonCurrentLine = "show"

var enumValues_SchemaJsonCurrentLine = []interface{}{
	"disabled",
	"show",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonCurrentLine) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SchemaJsonCurrentLine {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SchemaJsonCurrentLine, v)
	}
	*j = SchemaJsonCurrentLine(v)
	return nil
}

type SchemaJsonHover string

const SchemaJsonHoverAlways SchemaJsonHover = "always"
const SchemaJsonHoverDisabled SchemaJsonHover = "disabled"
const SchemaJsonHoverOnlyMark SchemaJsonHover = "onlyMark"

var enumValues_SchemaJsonHover = []interface{}{
	"disabled",
	"always",
	"onlyMark",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonHover) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SchemaJsonHover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SchemaJsonHover, v)
	}
	*j = SchemaJsonHover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SchemaJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["addMark"]; !ok || v == nil {
		plain.AddMark = false
	}
	if v, ok := raw["autoRemovePrefixZero"]; !ok || v == nil {
		plain.AutoRemovePrefixZero = true
	}
	if v, ok := raw["currentLine"]; !ok || v == nil {
		plain.CurrentLine = "show"
	}
	if v, ok := raw["fixedDigits"]; !ok || v == nil {
		plain.FixedDigits = 6.0
	}
	if v, ok := raw["hover"]; !ok || v == nil {
		plain.Hover = "onlyMark"
	}
	if v, ok := raw["ignores"]; !ok || v == nil {
		plain.Ignores = []string{}
	}
	if v, ok := raw["ignoresViaCommand"]; !ok || v == nil {
		plain.IgnoresViaCommand = []string{}
	}
	if v, ok := raw["languages"]; !ok || v == nil {
		plain.Languages = []string{}
	}
	if v, ok := raw["remHover"]; !ok || v == nil {
		plain.RemHover = true
	}
	if v, ok := raw["rootFontSize"]; !ok || v == nil {
		plain.RootFontSize = 16.0
	}
	if v, ok := raw["vw"]; !ok || v == nil {
		plain.Vw = false
	}
	if v, ok := raw["vwDesign"]; !ok || v == nil {
		plain.VwDesign = 750.0
	}
	if v, ok := raw["vwHover"]; !ok || v == nil {
		plain.VwHover = true
	}
	if v, ok := raw["wxss"]; !ok || v == nil {
		plain.Wxss = false
	}
	if v, ok := raw["wxssDeviceWidth"]; !ok || v == nil {
		plain.WxssDeviceWidth = 375.0
	}
	if v, ok := raw["wxssScreenWidth"]; !ok || v == nil {
		plain.WxssScreenWidth = 750.0
	}
	*j = SchemaJson(plain)
	return nil
}
